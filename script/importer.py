### This script is used to import movements from a file in a specific format (json is used as encoding)
## Ensure that the file has been generated by the generators provided at {link here}
# Or that you know what you are doing ! (No big danger on the line, relax x)

#Import generic stuff
import json 
import os

#Import the pi lib stuff
import motor_lib as mb
from motor_lib import Motor, Stylus
import RPi.GPIO as GPIO

#list all files of the generation folder
id = 0
files_dict = {}
for filename in os.listdir("./generation"):
    if filename[-4:] == ".drw": # .drw is the extension choosen for the generation file
        id += 1
        files_dict[filename] = id

choices = ""
for filename in files_dict:
    choices+=f"[{files_dict[filename]}] {filename}\n"

while True:        
    print(("Please, choose a file in the list bellow.\n"
        "If your file do not show up, please make sure that it's in the .drw format\n"))

        
    print(choices)

    try:
        choice = int(input(">>> "))
    except:
        for i in range(5):
            print("\n")
        print("Error, you must input a number !")
        
            
    else:
        if choice > id or choice < 1:
            for i in range(5):
                print("\n")
            print(f"Error, the number must be between 1 and {id} !")

        else:
            break


#import and read the choosen file
selected_filename = [filename for filename, file_id in files_dict.items() if file_id == choice][0]
try:
    with open(f"./generation/{selected_filename}", "r") as file:
        data = json.load(file)
except:
    print("Warning, error during the reading of your file, please, make sure to use json syntax")

try:
    type = data["type"]
except:
    print("Warning, your file don't seems to be in the correct format, please, include the 'type' of your file.")
    exit(1)
    
if type == "raw":
    #get all the points
    try:
        points = data["points"]
    except:
        print("Warning, your file don't seems to be in the correct format, please reffer to the example.drw")
        exit(1)
        
elif type == "processed":
    #get everything we need
    try:
        max_y = data["max-y"]
        max_x = data["max-x"]
        movement = data["list"]
            
    except:
        print("Warning, your file don't seems to be in the correct format, please reffer to the example.drw")
        exit(1)

else:
    print("Error, wrong type, please reffer to the example.drw.")
    exit(1)

#here we start to execute the movement
with open("./script/config.json", "r") as raw_conf:
    config = json.load(raw_conf)
    
Z_motor_info = config["Z_motor_info"]
X_motor_info = config["X_motor_info"]
Y_motor_info = config["Y_motor_info"]

CW = 1     # Clockwise Rotation
CCW = 0    # Counterclockwise Rotation
SPR = 200   # Steps per Revolution (360 / 1.8)
EN = 18 # Enable GPIO Pin

GPIO.setmode(GPIO.BCM)
GPIO.setup(EN, GPIO.OUT)

Y_motor = Motor(Y_motor_info, "Y_motor", 0, 1)
Y_motor.setup()

X_motor = Motor(X_motor_info, "X_motor", 0, 1)
X_motor.setup()

Z_motor = Motor(Z_motor_info, "Z_motor", 0, 1)
Z_motor.setup()


Main_stylus = Stylus([2599, 2543, 6530])
Main_stylus.add_motor(Y_motor, "Y")
Main_stylus.add_motor(X_motor, "X")
Main_stylus.add_motor(Z_motor, "Z")
Main_stylus.setup()

if type == "raw":
    starting = points[0]
    starting.append(-1)
    Main_stylus.go_to(starting)
    del starting[2]
    del points[0]
    for values in points:
        print(f"Drawing line to {values} ")
        try:
            Main_stylus.line(starting, values, False)
        except:
            print("Error, value out of range !")
            GPIO.cleanup()
            exit()
        starting = values
        
if type == "processed":
    #Check if the max arent exceded 
    if max_x > Main_stylus.max[0]:
        print(f"Error, the X maximum for you program is more than the maximum of the axis; {max_x} > {Main_stylus.max[0]}")
        GPIO.cleanup()
        exit(1)
    if max_y > Main_stylus.max[1]:
        print(f"Error, the Y maximum for you program is more than the maximum of the axis; {max_y} > {Main_stylus.max[1]}")
        GPIO.cleanup()
        exit(1)
     
    for i in movement:
        try:
            Main_stylus.go_to(i["start"].append(-1))
        except:
            GPIO.cleanup()
            exit()
            print("Here") #seriously
                    
        #so we are not slow during the motors moves
        moves=i["movement"]
            
        for mov in moves:
            Main_stylus.move_axis(0, mov[0])
            Main_stylus.move_axis(1, mov[1])
        
        Main_stylus.coordinate[0] += i["coordinates"][0]
        Main_stylus.coordinate[1] += i["coordinates"][1]
        print(f"Line {i} was drawn sucessfully !")

GPIO.cleanup()